// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DateDiffMVCTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ConvertDate")]
    public partial class ConvertDateFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ConvertDate.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ConvertDate", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I enter valid dates to convert")]
        [NUnit.Framework.TestCaseAttribute("1", "4", "1999", "5", "7", "2010", "There are 11 Years 3 Months and 2 Days between these dates.", null)]
        [NUnit.Framework.TestCaseAttribute("1", "7", "1999", "4", "4", "2100", "There are 100 Years 8 Months and 10 Days between these dates.", null)]
        [NUnit.Framework.TestCaseAttribute("27", "4", "1850", "5", "7", "2010", "There are 160 Years 1 Months and 1 Days between these dates.", null)]
        [NUnit.Framework.TestCaseAttribute("20", "11", "1999", "2", "7", "2007", "There are 7 Years 8 Months and 11 Days between these dates.", null)]
        public virtual void IEnterValidDatesToConvert(string startday, string startmonth, string startyear, string endday, string endmonth, string endyear, string diff, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I enter valid dates to convert", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
   testRunner.Given(string.Format("I enter a valid start date of {0}/{1}/{2}", startday, startmonth, startyear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
   testRunner.And(string.Format("I enter a vaild end date of {0}/{1}/{2}", endday, endmonth, endyear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 6
   testRunner.When("I submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
   testRunner.Then(string.Format("I get back the difference between the dates {0}", diff), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I enter invalid dates")]
        [NUnit.Framework.TestCaseAttribute("1", "4", "2020", "5", "7", "2010", "Start year is in the past", null)]
        [NUnit.Framework.TestCaseAttribute("1", "7", "2100", "4", "4", "2100", "Start date is in the past", null)]
        public virtual void IEnterInvalidDates(string startday, string startmonth, string startyear, string endday, string endmonth, string endyear, string error, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I enter invalid dates", exampleTags);
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
  testRunner.Given(string.Format("I enter a valid start date of {0}/{1}/{2}", startday, startmonth, startyear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
   testRunner.And(string.Format("I enter a vaild end date of {0}/{1}/{2}", endday, endmonth, endyear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
   testRunner.When("I submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
  testRunner.Then(string.Format("I get error message back {0}", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
